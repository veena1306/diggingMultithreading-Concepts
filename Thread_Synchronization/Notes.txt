=> Thread synchronization is required in multi threaded applications where multi threads compete to perform conflicting operations on the shared resource.
   like(read write operationa and write write operation)
Shared Resources :
  -> Heap Datastrcuture
  -> Global Variables
  -> File descriptors(opened Files. Sockets)
  -> Receiving data from external sources via multiple inlets.

Critical Sections :- 

=> code excerpts accessing the common data are called critcal section
=> Critical threads must be executed by the concurrent threads but only one at a time.
  -> Unexpected behavious
  -> segementation fault
  -> Data corruption
  -> any abnormal behavious

EX :- 1. Two or more threads updating same database
      2. Two or more thread wriitng to the same buffer


***************************************************************************** MUTEXES ***********************************************************************************************************8


=> Mutexes are thread synchronization tools which provides mutual exclusitivity while accesing a critical section my multiple concurrent threads.
Analogy :- 
=>Mutexes are like locker to the key.
=>whoever do not have the keys, have to wait
=>whoever accessing the locker have to handover the keys when done with accessing the locker.
     locker  = CS 
     whoever = Threads
     keys    = Mutexes

=> How mutexes work :- 
   -> grant access to 1 and only 1 thread at a time.
   ->  
         pthread_mutex_t mutex;
         foo()
         {
          pthread_mutex_lock(&mutex)
          =======================
          |                     |
          |  cs                 |
         ========================
         pthread_mutex_unlock(&mutex)
         
      }
 =>whichever thread lock the mutex, shall be able to enter into CS
 =>if a thread tries to lock a already locked mutex, thread is blocked
 =>multi threads may be blocked by the same mutex.
 =>when threads exists from the CS, it must unlock the nutex.
 =>which thread has to be given the mutex among waiting threads depends on the priority and thread scheduling etc
 =>More blocking and unblocking,more overhead done, poorer shall be application performance.
 =>Bigger the cs, larger the waitimg time for the lock to be free.
 
 
 
 
 
 *************************** mUTEX locking rules ********************************
1.  If T1 lockes a mutex, only T1 can unlock it.
2. T1 can not unblock an already unblocked Mutex = leads to undefined behhaviour
3. if a thread tries to double lock a thread it leads to self-deadlocked.
4. Mutexes are unlocked in LIFO order

   
    MUTEX POSIX APIS
    
    
=> Declaration : pthread_mutex_t my_mutex;
=> Initialization : pthread_mutex_init(&my_mutex, NULL);
=> Destruction : pthread_mutex_destroy(&my_mutex);
=> locking : pthread_mutex_lock(&my_mutex);
=> unlocking : pthread_mutex_unblock(&my_mutex);
   mutexes can never be memcopied = undefined behaviour
 =
 
 
 
 
 
 
 
 
 


